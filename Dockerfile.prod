# Use an official Ruby runtime as a parent image
FROM ruby:3.2.2-alpine as Builder

# Set environment variables
ENV BUNDLER_VERSION=2.4.13
ENV RAILS_ENV=production
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true

# Install system dependencies
RUN apk add --update --no-cache \
      build-base \
      imagemagick \
      libxml2-dev \
      libxslt-dev \
      nodejs \
      yarn \
      tzdata \
      postgresql-dev \
      postgresql-client 

# Install bundler
RUN gem install bundler -v $BUNDLER_VERSION

# Create and set the working directory
RUN mkdir /app
WORKDIR /app

# Copy the Gemfile and install
# Separate step to leverage Docker caching
COPY Gemfile Gemfile.lock ./
RUN bundle config build.nokogiri --use-system-libraries
RUN bundle config set --local without 'development test'
RUN bundle check || bundle install

# Copy the Rails application into place
COPY . ./

# Precompile Rails assets
RUN bundle exec rake assets:precompile

# Stage 2
# Use a minimal Alpine image with no additional packages as a base
FROM alpine:3.14

# Copy over the application from the builder stage
COPY --from=Builder /app /app
COPY --from=Builder /usr/local/bundle /usr/local/bundle

# Install runtime dependencies
RUN apk add --update --no-cache \
      postgresql-client \
      tzdata \
      nodejs

# Set Rails env
ENV RAILS_ENV=production
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true

# Expose the application on port 3000
EXPOSE 3000

# Set the working directory and run the rails server
WORKDIR /app
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
